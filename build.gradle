buildscript {
    dependencies {
        classpath('de.jjohannes.gradle:extra-java-module-info:0.14')
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'net.neoforged.gradleutils' version '[2.0.16,3)'
}

apply plugin: 'maven-publish'

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'de.jjohannes.extra-java-module-info'

    group 'cpw.mods'
    java {
        toolchain.languageVersion = JavaLanguageVersion.of(16)
        modularity.inferModulePath.set(true)
    }
    version = 'mohist-2.1.11'

    repositories {
        mavenLocal()
        maven {
            name = 'forge'
            url = 'https://maven.neoforged.net/releases'
        }
    }

    dependencies.testRuntimeOnly('org.apiguardian:apiguardian-api:1.1.2') // No idea why, but windows needs this to not explode.

    extraJavaModuleInfo {
        failOnMissingModuleInfo = false
        automaticModule('jmh-core-1.35.jar', 'jmh.core')
    }

    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { type -> version.toUpperCase().contains(type) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }

    dependencyUpdates {
        rejectVersionIf {
            isNonStable(it.candidate.version)
        }
    }

    // Hack eclipse into knowing that the gradle deps are modules
    eclipse {
        classpath {
            containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
            file {
                whenMerged {
                    entries.findAll { it.kind == 'con' && it.path == 'org.eclipse.buildship.core.gradleclasspathcontainer' }.each {
                        it.entryAttributes['module'] = 'true'
                    }
                }
            }
        }
    }
}


repositories {
    mavenCentral()
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

// We can't use toolchains because we need --add-export
//java.toolchain.languageVersion = JavaLanguageVersion.of(16)
compileJava {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    options.compilerArgs += [
            '-Xlint:unchecked',
            '--add-exports=java.base/sun.security.util=cpw.mods.securejarhandler',
    ]
}

test {
    //exclude '**/*'
    useJUnitPlatform()
    jvmArgs += [
            '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED'
    ]
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    options.compilerArgs += [
            '--add-modules=jdk.zipfs',
            '--add-exports=jdk.zipfs/jdk.nio.zipfs=ALL-UNNAMED'
    ]
}

group = 'cpw.mods'

version = 'mohist-2.1.11'
logger.lifecycle('Version: ' + version)

ext.asmVersion = 9.5
dependencies {
    api("org.ow2.asm:asm:${asmVersion}")
    api("org.ow2.asm:asm-tree:${asmVersion}")
    api("org.ow2.asm:asm-commons:${asmVersion}")
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.+')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.+')
}

changelog {
    fromTag "0.9"
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    manifest {
        attributes(
                'Specification-Title': 'securejarhandler',
                'Specification-Vendor': 'neoforged',
                'Specification-Version': '1', // We are version 1 of ourselves
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor':'neoforged',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': gradleutils.gitInfo.abbreviatedId,
                'Git-Branch': gradleutils.gitInfo.branch,
                'Build-Number': project.version,
        )
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }

    repositories {
        mavenLocal()

        maven {
            name = "Mohist-Maven"
            setUrl("file:/Mohist-Maven/maven/")
        }
    }
}